#include "suspencion.h"

void configurarSuspencion()
{
    watch.setBrightness(200); // Brillo al mÃ¡ximo al inicio
    /*
    watch.configAccelerometer(); // Configurar acelerÃ³metro
    // ðŸ“Œ Configurar el acelerÃ³metro correctamente
    watch.configAccelerometer(
        SensorBMA423::RANGE_4G,            // Sensibilidad Â±4G
        SensorBMA423::ODR_100HZ,           // Frecuencia de muestreo 100Hz
        SensorBMA423::BW_NORMAL_AVG4,      // Ancho de banda normal
        SensorBMA423::PERF_CONTINUOUS_MODE // Modo continuo
    );
    */
    // watch.enableAccelerometer(); // Activar acelerÃ³metro
    
    ultimaInteraccion = millis();

    Serial.println("âœ… Sistema iniciado.");

    // Configurar la pantalla tÃ¡ctil como fuente de activaciÃ³n
    esp_sleep_enable_ext1_wakeup(1ULL << TOUCH_INTERRUPT_PIN, ESP_EXT1_WAKEUP_ANY_HIGH);

    // Configurar la detecciÃ³n de movimiento (GPIO_WAKEUP)
    pinMode(TOUCH_INTERRUPT_PIN, INPUT_PULLUP);
    esp_sleep_enable_gpio_wakeup();
}

// ðŸ”» Apagar pantalla y entrar en Deep Sleep
void suspenderSistema()
{
    if (!enSuspension)
    {
        Serial.println("ðŸ’¤ Entrando en suspensiÃ³n...");
        pantallaEncendida = false;
        enSuspension = true;
        watch.setBrightness(0);
        // Reducir la frecuencia del procesador
        setCpuFrequencyMhz(80); // Cambiar la frecuencia de la CPU a 80 MHz para ahorrar energÃ­a
    }
}

void manejarSuspencion()
{
    unsigned long tiempoActual = millis();

    // ðŸ”» Reducir brillo tras 30s de inactividad
    if (pantallaEncendida && (tiempoActual - ultimaInteraccion > TIEMPO_ATENUACION_MS))
    {
        atenuarPantalla();
    }

    // ðŸ’¤ Suspender tras 60s de inactividad
    if (pantallaEncendida && (tiempoActual - ultimaInteraccion > TIEMPO_SUSPENSION_MS))
    {
        suspenderSistema();
    }

    // ðŸ”„ Detectar toque
    verificarToque();
    verificarNotificacion();
}
